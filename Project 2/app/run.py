import json
import plotly
import pandas as pd
import sys
sys.path.append('../')
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from flask import Flask, render_template, request
from plotly.graph_objs import Bar
import joblib
from sqlalchemy import create_engine
from sklearn.base import BaseEstimator, TransformerMixin


class get_text_embeddings(BaseEstimator, TransformerMixin):
    def __init__(self, transformer_model):
        """
        Initialize the GetTextEmbeddings transformer.
        
        Parameters:
        transformer_model (object): A transformer-based model used for text embedding generation.
        """
        self.transformer_model = transformer_model

    def fit(self, X, y=None):
        """
        Fit method (no actual fitting is performed).
        
        Parameters:
        X (array-like or dataframe): Input data.
        y (array-like or None): Target data (not used).
        
        Returns:
        self (object): The fitted transformer object.
        """
        return self
    
    def transform(self, X):
        """
        Transform input text data into text embeddings.
        
        Parameters:
        X (array-like or dataframe): Input text data.
        
        Returns:
        embeddings (array-like): Text embeddings generated by the transformer model.
        """
        # Reset index to ensure proper alignment
        if type(X) != type([]): 
            X.reset_index(drop=True, inplace=True)
        
        # Generate text embeddings using the transformer model
        embeddings = self.transformer_model.encode(X, show_progress_bar=True)
        
        return embeddings
    


app = Flask(__name__)

def tokenize(text):
    tokens = word_tokenize(text)
    lemmatizer = WordNetLemmatizer()
    clean_tokens = [lemmatizer.lemmatize(tok).lower().strip() for tok in tokens]
    return clean_tokens

def load_data():
    engine = create_engine('sqlite:///../data/DisasterResponse.db')
    df = pd.read_sql_table('DisasterResponse_table', engine)
    return df

def load_model():
    model = joblib.load("../models/classifier.pkl")
    return model

@app.route('/')
@app.route('/index')
def index():
    df = load_data()

    genre_counts = df.groupby('genre').count()['message']
    genre_names = list(genre_counts.index)
    
    category_names = df.iloc[:, 4:].columns
    category_counts = (df.iloc[:, 4:] != 0).sum()
    
    graphs = [
        {
            'data': [
                Bar(
                    x=genre_names,
                    y=genre_counts
                )
            ],
            'layout': {
                'title': 'Distribution of Message Genres',
                'yaxis': {'title': "Count"},
                'xaxis': {'title': "Genre"}
            }
        },
        
        {
            'data': [
                Bar(
                    x=category_names,
                    y=category_counts
                )
            ],
            'layout': {
                'title': 'Distribution of Message Categories',
                'yaxis': {'title': "Count"},
                'xaxis': {'title': "Category"}
            }
        }
    ]
    
    ids = ["graph-{}".format(i) for i, _ in enumerate(graphs)]
    graphJSON = json.dumps(graphs, cls=plotly.utils.PlotlyJSONEncoder)
    
    return render_template('master.html', ids=ids, graphJSON=graphJSON)

@app.route('/go')
def go():
    query = request.args.get('query', '') 

    model = load_model()
    classification_labels = model.predict([query])[0]
    
    df = load_data()
    classification_results = dict(zip(df.columns[4:], classification_labels))
    
    return render_template(
        'go.html',
        query=query,
        classification_result=classification_results
    )

def main():
    app.run(host='0.0.0.0', port=3001, debug=True)

if __name__ == '__main__':
    main()
